esphome:
  name: xiaomi_air_purifier
  platform: esp32
  board: esp32dev
  build_path: .build
  platformio_options:
    platform: espressif32@1.11.0
    platform_packages: |-4
          framework-arduinoespressif32 @ https://github.com/pauln/arduino-esp32.git#solo-no-mac-crc/1.0.4

  includes:
    - miiot_uart.h
    - xiaomi_air_purifier.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: !secret wifi_fallback_ssid
    password: !secret wifi_fallback_password

captive_portal:

web_server:
  port: 80

# Enable Home Assistant API
api:

ota:

# Enable logging
logger:
  level: DEBUG

uart:
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200
  id: uart_bus
  
custom_component:
- id: air_purifier
  lambda: |-
    auto air_purifier = new XiaomiAirPurifier(id(uart_bus));
    App.register_component(air_purifier);
    return {air_purifier};
  
  components:
    id: ap_custom

text_sensor:
- platform: custom
  id: model
  lambda: |-
    auto cc = static_cast<XiaomiAirPurifier*>(id(ap_custom));
    return {
      cc->model_name,
      cc->mcu_firmware,
      cc->ble_config,
      cc->filter_rfid_tag_sensor,
      cc->filter_rfid_product_id_sensor,
      cc->app_extra_sensor
    };

  text_sensors:
  - name: Model
  - name: MCU Firmware
  - name: BLE Config
  - name: Filter RFID Tag
  - name: Filter RFID Product Id
  - name: App Extra

sensor:
- platform: custom
  lambda: |-
    auto cc = static_cast<XiaomiAirPurifier*>(id(ap_custom));
    return {
      cc->fanlevel_sensor,
      cc->mode_sensor,
      cc->aqi_sensor,
      cc->temperature_sensor,
      cc->humidity_sensor,
      cc->filterlife_remaining_sensor,
      cc->filterhours_used_sensor,
      cc->buzzer_sensor,
      cc->buzzer_volume_sensor,
      cc->led_sensor,
      cc->led_brightness_sensor,
      cc->favorite_level_sensor,
      cc->favorite_rpm_sensor,
      cc->motor_speed_sensor,
      cc->use_time_sensor,
      cc->purify_volume_sensor,
      cc->average_aqi_sensor
    };
  
  sensors:
  - name: Fan level
  - name: Mode
  - name: AQI
  - name: Temperature
  - name: Humidity
  - name: Filter-life remaining
  - name: Filter hours used
  - name: Buzzer
  - name: Buzzer volume
  - name: LED
  - name: LED brightness
  - name: Favorite level
  - name: Favorite RPM
  - name: Motor speed
  - name: Usetime
  - name: Purify volume
  - name: AQI (avg.)

binary_sensor:
- platform: custom
  lambda: |-
    auto cc = static_cast<XiaomiAirPurifier*>(id(ap_custom));
    return {
      cc->power_sensor,
      cc->child_lock_sensor
    };
  binary_sensors:
  - name: Power state
  - name: Child Lock

switch:
- platform: custom
  lambda: |-
    auto cc = static_cast<XiaomiAirPurifier*>(id(ap_custom));
    return {cc};

  switches:
  - name: Power